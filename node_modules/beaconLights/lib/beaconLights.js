var PiStop = require('pistop');
var ROLLING_AVERAGE_SIZE = 5;

var Beacon = function(uri, immediatePin, nearPin, farPin) {
    this.uri = uri;
    this.txPower = 0;
    this.rssiValues = [];
    this.lights = new PiStop(immediatePin, nearPin, farPin) ;
    this.timer = null;
    this.startTimer();
};

Beacon.prototype.startTimer = function() {
    var that = this;
    this.timer = setTimeout(function() {
        that.lights.clear();
    }, 5000);
};

Beacon.prototype.resetTimer = function() {
    clearTimeout(this.timer);
    this.startTimer();
};

Beacon.prototype.newScan = function(rssi, txPower, IMMEDIATE_RANGE, NEAR_RANGE) {
    this.rssiValues.push(rssi);
    this.rssiValues = trimStoredReadings(this.rssiValues, ROLLING_AVERAGE_SIZE);
    var calcValue =  calcAverage(this.rssiValues);
    var range = calcRange(calcValue, txPower);
    if (range < IMMEDIATE_RANGE) {
        this.lights.immediate();
    } else if ( range > FAR_RANGE ) {
        this.lights.far();
    } else if ( range <= FAR_RANGE && range >= IMMEDIATE_RANGE ) {
        this.lights.near();
    }
    this.resetTimer();
};

function calcRange(rssi, txPower) {
    var signalLoss = txPower - rssi;
    var rawRange = Math.sqrt(Math.pow(10, signalLoss / 10));
    return Math.round(rawRange);
}

function calcAverage(rssiValues) {
    var result = 0;
    for (var i = 0; i < rssiValues.length; i++) {
        result += rssiValues[i];
    }
    return result / rssiValues.length;
}

function trimStoredReadings(readings, trimToLength) {
    if ( readings.length > trimToLength ) {
        readings = readings.slice(-trimToLength);
    }
    return readings;
}


module.exports = Beacon;
